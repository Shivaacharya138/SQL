CREATE DATABASE SQLCASESTUDY1_25

USE SQLCASESTUDY1_25


SELECT TOP 2 * FROM fact

SELECT TOP 2 * FROM Location

SELECT Top 2 * FROM Product

--1. Display the no. of states Present in the Location Table
SELECT Count(Distinct State) No_of_states
FROM Location

--2. How Many Products are of reular Type
SELECT Count(*) as No_of_Products FROM Product where Type = 'Regular'

--3. How much Spending has been done on Marketing of Product ID1
SELECT SUM(Marketing) Total_marketing FROM fact Where ProductId=1

--4. What is the minimum sales of a product?
SELECT MIN(Sales) Min_Sale from fact

--5. Display the max Cost of Good Sold (COGS).
SELECT MAX(COGS) MAX_COGS FROM fact

--6. Display the details of the product where product type iscoffee.
SELECT * FROM PRODUCT WHERE Product_Type = 'Coffee'

--7. Display the details where total expenses are greater than40.
SELECT * FROM FACT WHERE Total_Expenses > 40

--8. What is the average sales in area code 719?
SELECT Area_Code, AVG(Sales) AVG_Sales FROM fact GROUP BY Area_Code HAVING Area_Code = 719

--9. Find out the total profit generated by Colorado state.
select Sum(Profit) Total_Profit from fact F inner join Location L 
on F.Area_Code = L.Area_code Where State = 'Colorado'

--10. Display the average inventory for each product ID.
SELECT ProductId, AVG(INVENTORY) AVG_INVENTORY FROM FACT GROUP BY ProductId ORDER BY ProductId

--11. Display state in a sequential order in a LocationTable.
SELECT * FROM Location ORDER BY STATE

--12. Display the average budget of the Product where the average budget margin should be greater than 100.
SELECT ProductId, AVG(Budget_Margin) AVG_Budget FROM fact 
GROUP BY ProductId HAVING AVG(Budget_Margin)>100

--13. What is the total sales done on date 2010-01-01?
SELECT SUM(SALES) TOTAL_SALES FROM FACT WHERE Date = '2010-01-01'

--14. Display the average total expense of each product ID on anindividual date.
SELECT DATE, ProductId, AVG(Total_Expenses) AVG_EXPENSES FROM fact GROUP BY DATE, ProductId

--15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.
SELECT F.DATE, P.ProductId, P.Product_Type, P.Product, F.Sales, F.Profit, L.State, L.Area_code
FROM FACT F INNER JOIN Product P on F.ProductId = P.ProductID INNER JOIN
Location L on F.Area_Code = L.Area_Code

--16. Display the rank without any gap to show the sales wiserank.
SELECT DENSE_RANK() OVER (ORDER BY Sales desc) Rank_By_Sales, * FROM fact

--17. Find the state wise profit and sales.
SELECT F.State SUM(Profit) Total_Profit, SUM(Sales) Total_sales
FROM FACT F INNER JOIN LOCATION L ON F.Area_Code = L.Area_code GROUP BY State

--18. Find the state wise profit and sales along with the productname.
SELECT L.State, P.Product, SUM(F.Profit) Total_Profit, SUM(F.Sales) Total_sales
FROM FACT F INNER JOIN LOCATION L ON F.Area_Code = L.Area_code 
INNER JOIN PRODUCT P ON F.ProductId = P.ProductId
GROUP BY L.State, P.Product
ORDER BY L.State, P.Product


--19. If there is an increase in sales of 5%, calculate the increasedsales.
SELECT ProductID, SALES, SALES*1.05 INCREASED_SALES FROM FACT

--20. Find the maximum profit along with the product ID and producttype.
SELECT TOP 1 F.ProductID, P.Product, F.Profit
FROM FACT F INNER JOIN PRODUCT P ON F.ProductID = P.ProductID 
ORDER BY F.Profit Desc

--21. Create a stored procedure to fetch the result according to theproduct type from ProductTable.
CREATE PROCEDURE Product_Details (@Product_N Varchar(20))
AS
SELECT * FROM PRODUCT WHERE Product_Type = @Product_N

EXEC Product_details 'Coffee' 

--22. Write a query by creating a condition in which if the total expenses isless than 60 then it is a profit or else loss.
SELECT Total_Expenses,
CASE
WHEN Total_Expenses < 60 THEN 'Profit'
WHEN Total_Expenses > 60 THEN 'Loss'
END
AS STATUS FROM Fact

--23. Give the total weekly sales value with the date and product IDdetails. Use roll-up to pull the data in hierarchical order.
SELECT DATE, ProductId, SUM(SALES) Total_Sales
FROM FACT GROUP BY ROLLUP(DATE, ProductId)

--24. Apply union and intersection operator on the tables which consist of attribute area code.
SELECT Area_Code from fact
UNION
SELECT Area_Code from Location

SELECT Area_Code from fact
INTERSECT
SELECT Area_Code from Location

--25. Create a user-defined function for the product table to fetch aparticular product type based upon the user’s preference.
CREATE FUNCTION FetchProduct_Details(@Product_N Varchar(20))
RETURNS TABLE
AS
RETURN
(
SELECT * FROM PRODUCT WHERE Product_Type = @Product_N
);

SELECT * FROM dbo.FetchProduct_Details('Coffee')

--26. Change the product type from coffee to tea where product ID is 1and undo it.
BEGIN TRANSACTION
UPDATE Product
SET Product_Type = 'Tea'
WHERE ProductId =1

PRINT 'Product_Type update to Tea'
ROLLBACK

--27. Display the date, product ID and sales where total expenses are between 100 to 200.
SELECT DATE, PRODUCTID, SALES FROM FACT WHERE TOTAL_EXPENSES BETWEEN 100 AND 200

--28. Delete the records in the Product Table for regulartype.
BEGIN TRANSACTION
DELETE FROM PRODUCT
WHERE TYPE = 'Regular'

PRINT 'Deleted the Product_Type Regular'
PRINT 'I HAVE ROOLED BACK SINCE I DOESNT WANT TO LOSS DATA'
RollBack

--29. Display the ASCII value of the fifth character from the column Product
SELECT Product, ASCII(substring(Product, 5 , 1)) ASCII_of_5 FROM product

